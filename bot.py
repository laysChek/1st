import json
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio

# üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7686931299:AAFRCpb58TuEl75FzmViv70wgBpIFqdjYTw"

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é
with open("menu.json", "r", encoding="utf-8") as file:
    dishes = json.load(file)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ä—Ç–æ—á–∫–∏")],
        [KeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
        [KeyboardButton(text="–¢–µ—Å—Ç—ã")]
    ],
    resize_keyboard=True
)

def get_name():
    """–†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    return "–ï–≤–≥–µ–Ω–∏—è" if random.random() < 0.2 else "–ñ–µ–Ω—è"

# üîπ –û—Å—Ç—Ä–æ—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
funny_correct_responses = [
    "üéâ –î–∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –≥—É—Ä—É –∫—É—Ö–Ω–∏, {name}! üî• –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ *{correct}*!",
    "üéâ –ë–∏–Ω–≥–æ! –¢—ã –∑–Ω–∞–µ—à—å –º–µ–Ω—é –ª—É—á—à–µ, —á–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã. üòé *{correct}*!",
    "üéâ –í–µ—Ä–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –∑–∞–∫–∞–∑—ã–≤–∞–π *{correct}* ‚Äì —Ç—ã –∑–∞—Å–ª—É–∂–∏–ª–∞. üòâ",
    "üéâ –¢—ã –±—ã–ª–∞ –±—ã –æ—Ç–ª–∏—á–Ω—ã–º —à–µ—Ñ–æ–º! üç≥ *{correct}*!"
]

funny_wrong_responses = [
    "‚ùå –û—Ö, {name}, —Ç—ã —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ? üòÇ –≠—Ç–æ –∂–µ *{correct}*! –ü–æ—Ä–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω!",
    "‚ùå –ù—É, —Ç—ã –ø–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª–∞‚Ä¶ –µ—Å–ª–∏ –±—ã —Å–æ–≤—Å–µ–º –Ω–µ —É–≥–∞–¥–∞–ª–∞. üòÜ –≠—Ç–æ *{correct}*!",
    "‚ùå –ê–π-–∞–π, {name}! –ö—Ç–æ-—Ç–æ —è–≤–Ω–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª *{correct}*!",
    "‚ùå –ù–µ—Ç, –Ω–æ –∑–∞ —Å–º–µ–ª–æ—Å—Ç—å ‚Äì 10 –±–∞–ª–ª–æ–≤! üòÑ –ù–∞—Å—Ç–æ—è—â–∏–π –æ—Ç–≤–µ—Ç: *{correct}*."
]

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {get_name()}! üíï –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

# üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º "–ö–∞—Ä—Ç–æ—á–∫–∏"
@dp.message(F.text == "–ö–∞—Ä—Ç–æ—á–∫–∏")
async def send_flashcard(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º"""
    index = random.randint(0, len(dishes) - 1)
    dish = dishes[index]

    buttons = [
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_{index}")],
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="next_card")],
        [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="exit")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(f"‚ùì {get_name()}, –∫–∞–∫–æ–π —Å–æ—Å—Ç–∞–≤ —É –±–ª—é–¥–∞ *{dish['name']}*?", parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("show_"))
async def show_answer(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞)"""
    index = int(callback_query.data.replace("show_", ""))
    dish = dishes[index]

    ingredients = ", ".join(dish["ingredients"])
    await callback_query.message.edit_text(f"üçΩ *{dish['name']}*\n–°–æ—Å—Ç–∞–≤: {ingredients}", parse_mode="Markdown")

    buttons = [
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞", callback_data="next_card")],
        [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="exit")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

@dp.callback_query(F.data == "next_card")
async def next_flashcard(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    await send_flashcard(callback_query.message)

# üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫–æ–Ω—á–∏—Ç—å"
@dp.callback_query(F.data == "exit")
async def exit_quiz(callback_query: types.CallbackQuery):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.answer("üè† –¢—ã –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    await callback_query.message.delete()

# üîπ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
@dp.message(F.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def send_quiz(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    question_index = random.randint(0, len(dishes) - 1)
    correct_dish = dishes[question_index]

    wrong_answers = random.sample(
        [d for d in dishes if d["name"] != correct_dish["name"]], 3
    )

    options = [correct_dish] + wrong_answers
    random.shuffle(options)

    buttons = [
        [InlineKeyboardButton(text=option["name"], callback_data=f"quiz_{dishes.index(option)}")]
        for option in options
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(f"‚ùì {get_name()}, –∫–∞–∫–æ–µ –±–ª—é–¥–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n{', '.join(correct_dish['ingredients'])}?", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("quiz_"))
async def check_quiz_answer(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    selected_index = int(callback_query.data.replace("quiz_", ""))
    selected_dish = dishes[selected_index]

    question_text = callback_query.message.text.split("\n")[0]
    correct_dish = next((d for d in dishes if ', '.join(d["ingredients"]) in callback_query.message.text), None)

    if correct_dish and selected_dish["name"] == correct_dish["name"]:
        response = random.choice(funny_correct_responses).format(name=get_name(), correct=correct_dish["name"])
    else:
        response = random.choice(funny_wrong_responses).format(name=get_name(), correct=correct_dish["name"])

    buttons = [
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_quiz")],
        [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="exit")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "next_quiz")
async def next_quiz(callback_query: types.CallbackQuery):
    await send_quiz(callback_query.message)

# üîπ –¢–µ—Å—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ)
user_tests = {}

@dp.message(F.text == "–¢–µ—Å—Ç—ã")
async def send_test(message: types.Message):
    index = random.randint(0, len(dishes) - 1)
    dish = dishes[index]

    await message.answer(f"üìù {get_name()}, –≤–≤–µ–¥–∏ —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞: *{dish['name']}*.\n–ù–∞–ø–∏—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    user_tests[message.chat.id] = dish

@dp.message(F.text)
async def check_test_answer(message: types.Message):
    if message.chat.id not in user_tests:
        return

    dish = user_tests.pop(message.chat.id)

    response = f"‚ö†Ô∏è {get_name()}, –Ω–µ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ *{dish['name']}*:\n{', '.join(dish['ingredients'])}."

    await message.answer(response, parse_mode="Markdown")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
